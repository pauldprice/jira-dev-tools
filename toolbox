#!/bin/bash

# Gather Toolbox - Main entry point for all TypeScript tools
# This script provides a unified interface to run various development tools

set -e

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Check for development mode flags
DEV_MODE=false
SKIP_CHECKS=${TOOLBOX_SKIP_CHECKS:-false}

# Parse initial flags
for arg in "$@"; do
    case $arg in
        --dev|-D)
            DEV_MODE=true
            ;;
        --no-check|-n)
            SKIP_CHECKS=true
            ;;
    esac
done

# Remove the flags we've processed
FILTERED_ARGS=()
for arg in "$@"; do
    case $arg in
        --dev|-D|--no-check|-n)
            # Skip these flags
            ;;
        *)
            FILTERED_ARGS+=("$arg")
            ;;
    esac
done

# Check if dist directory exists and has recent builds
DIST_EXISTS=false
if [ -d "$SCRIPT_DIR/dist" ] && [ -f "$SCRIPT_DIR/dist/tools/wizard.js" ]; then
    DIST_EXISTS=true
fi

# In production mode, check if we need to build
if [ "$DEV_MODE" = "false" ] && [ "$DIST_EXISTS" = "false" ]; then
    echo -e "${YELLOW}No compiled JavaScript found. Building toolbox...${NC}"
    cd "$SCRIPT_DIR" && npm run build
    echo -e "${GREEN}Build complete!${NC}"
    echo ""
fi

# Environment checks (only in dev mode or if no dist)
if [ "$SKIP_CHECKS" != "true" ] && ([ "$DEV_MODE" = "true" ] || [ "$DIST_EXISTS" = "false" ]); then
    echo -e "${BOLD}${BLUE}Checking environment...${NC}"
else
    # Still need to check if node_modules exists even with skip checks
    if [ ! -d "$SCRIPT_DIR/node_modules" ]; then
        echo -e "${YELLOW}Dependencies not installed. Running npm install...${NC}"
        cd "$SCRIPT_DIR" && npm install
    fi
fi

if [ "$SKIP_CHECKS" == "true" ]; then
    # Skip to main execution
    :
else

# Check Node.js version
REQUIRED_NODE_VERSION="22.14.0"
MIN_NODE_VERSION="16.0.0"

if ! command -v node &> /dev/null; then
    echo -e "${RED}Error: Node.js is not installed${NC}"
    echo -e "Please install Node.js ${REQUIRED_NODE_VERSION} or higher"
    exit 1
fi

CURRENT_NODE_VERSION=$(node -v | cut -d'v' -f2)

# Function to compare versions
version_gte() {
    [ "$1" = "$(echo -e "$1\n$2" | sort -V | tail -n1)" ]
}

# Only show version warnings in dev mode
if [ "$DEV_MODE" = "true" ]; then
    # Check if .nvmrc exists and matches current version
    if [ -f "$SCRIPT_DIR/.nvmrc" ]; then
        NVMRC_VERSION=$(cat "$SCRIPT_DIR/.nvmrc")
        if [ "$CURRENT_NODE_VERSION" != "$NVMRC_VERSION" ]; then
            echo -e "${YELLOW}Warning: Node.js version mismatch${NC}"
            echo -e "Current version: ${CURRENT_NODE_VERSION}"
            echo -e "Required version: ${NVMRC_VERSION} (from .nvmrc)"
            echo -e ""
            echo -e "Please run: ${CYAN}nvm use${NC}"
            echo -e ""
            
            # Check if at least meets minimum version
            if ! version_gte "$CURRENT_NODE_VERSION" "$MIN_NODE_VERSION"; then
                echo -e "${RED}Error: Node.js version ${CURRENT_NODE_VERSION} is below minimum required ${MIN_NODE_VERSION}${NC}"
                exit 1
            fi
        fi
    elif ! version_gte "$CURRENT_NODE_VERSION" "$MIN_NODE_VERSION"; then
        echo -e "${RED}Error: Node.js version ${CURRENT_NODE_VERSION} is below minimum required ${MIN_NODE_VERSION}${NC}"
        echo -e "Please install Node.js ${MIN_NODE_VERSION} or higher"
        exit 1
    fi
else
    # In production mode, just check minimum version
    if ! version_gte "$CURRENT_NODE_VERSION" "$MIN_NODE_VERSION"; then
        echo -e "${RED}Error: Node.js version ${CURRENT_NODE_VERSION} is below minimum required ${MIN_NODE_VERSION}${NC}"
        echo -e "Please install Node.js ${MIN_NODE_VERSION} or higher"
        exit 1
    fi
fi

# Check npm
if ! command -v npm &> /dev/null; then
    echo -e "${RED}Error: npm is not installed${NC}"
    exit 1
fi

# Dev mode specific checks
if [ "$DEV_MODE" = "true" ]; then
    # Check TypeScript
    if [ ! -f "$SCRIPT_DIR/node_modules/.bin/tsc" ]; then
        echo -e "${YELLOW}TypeScript not found in node_modules${NC}"
    fi

    # Check ts-node
    if [ ! -f "$SCRIPT_DIR/node_modules/.bin/ts-node" ]; then
        echo -e "${YELLOW}ts-node not found in node_modules${NC}"
    fi
fi

# Check if node_modules exists
if [ ! -d "$SCRIPT_DIR/node_modules" ]; then
    echo -e "${YELLOW}Dependencies not installed. Running npm install...${NC}"
    cd "$SCRIPT_DIR" && npm install
fi

# Check git (required for release-notes)
if ! command -v git &> /dev/null; then
    echo -e "${YELLOW}Warning: git is not installed${NC}"
    echo -e "The release-notes command requires git to be installed"
fi

# Optional: Check for required environment variables
check_env_vars() {
    local missing_vars=()
    
    # Check for common required environment variables
    if [ -z "$ANTHROPIC_API_KEY" ] && [ ! -f "$HOME/.toolbox/config.json" ] && [ ! -f "$HOME/.toolboxrc.json" ]; then
        missing_vars+=("ANTHROPIC_API_KEY (for AI features)")
    fi
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        echo -e "${YELLOW}Warning: Some features may not work without these environment variables:${NC}"
        for var in "${missing_vars[@]}"; do
            echo -e "  - $var"
        done
        echo -e ""
        echo -e "You can set these in:"
        echo -e "  - Environment variables"
        echo -e "  - ~/.toolbox/config.json"
        echo -e "  - .env file in the project root"
        echo -e ""
    fi
}

# Run environment variable check but don't fail
if [ "$DEV_MODE" = "true" ]; then
    check_env_vars
fi

echo -e "${GREEN}âœ“ Environment checks passed${NC}"
echo ""

fi  # End of SKIP_CHECKS condition

# Function to display usage
usage() {
    echo -e "${BOLD}${BLUE}Gather Toolbox${NC}"
    echo ""
    echo -e "${BOLD}USAGE:${NC}"
    echo "    toolbox [options] <command> [command-options]"
    echo ""
    echo -e "${BOLD}GLOBAL OPTIONS:${NC}"
    echo -e "    ${CYAN}--dev, -D${NC}       Run in development mode (uses ts-node)"
    echo -e "    ${CYAN}--no-check, -n${NC}  Skip environment checks for faster startup"
    echo ""
    echo -e "${BOLD}COMMANDS:${NC}"
    echo -e "    ${CYAN}fetch-jira${NC}      Fetch Jira ticket details"
    echo -e "    ${CYAN}fetch-attachment${NC} Download Jira attachment"
    echo -e "    ${CYAN}release-notes${NC}   Generate HTML release notes from git commits"
    echo -e "    ${CYAN}analyze-pdf${NC}     Analyze PDF files using Claude's visual AI"
    echo -e "    ${CYAN}bitbucket${NC}       Interact with Bitbucket repositories"
    echo -e "    ${CYAN}run-sql${NC}         Run SQL scripts with variable substitution"
    echo -e "    ${CYAN}track-day${NC}       Track daily activities from Slack, Gmail, and Calendar"
    echo -e "    ${CYAN}search-email${NC}    Search and analyze Gmail conversations with AI"
    echo -e "    ${CYAN}gmail-accounts${NC}  Manage Gmail accounts for email tools"
    echo -e "    ${CYAN}cache${NC}           Manage toolbox cache"
    echo -e "    ${CYAN}wizard${NC}          Launch interactive CLI command builder"
    echo -e "    ${CYAN}help${NC}            Show this help message"
    echo ""
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo "    toolbox fetch-jira APP-1234"
    echo "    toolbox --dev wizard  # Run wizard in development mode"
    echo "    toolbox release-notes --help"
    echo ""
    echo -e "Run '${CYAN}toolbox <command> --help${NC}' for more information on a specific command."
}

# Main command parsing
COMMAND="${FILTERED_ARGS[0]:-wizard}"

# Remove the command from the filtered args
COMMAND_ARGS=("${FILTERED_ARGS[@]:1}")

# Set node options for production mode
if [ "$DEV_MODE" = "false" ]; then
    export NODE_ENV=production
    # Disable source map support in production for faster startup
    export NODE_OPTIONS="--no-enable-source-maps"
fi

# Remove the command from arguments to pass the rest to the tool
case "$COMMAND" in
    fetch-jira|jira)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/fetch-jira-ticket.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/fetch-jira-ticket.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    fetch-attachment|attachment|attach)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/fetch-jira-attachment.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/fetch-jira-attachment.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    release-notes|release|notes)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/generate-release-notes.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/generate-release-notes.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    analyze-pdf|pdf|analyze)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/analyze-pdf.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/analyze-pdf.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    bitbucket|bb)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/bitbucket.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/bitbucket.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    cache)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/cache-manager.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/cache-manager.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    run-sql|sql)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/run-sql.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/run-sql.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    track-day|track)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/track-day.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/track-day.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    search-email|email-search|email)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/search-email.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/search-email.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    gmail-accounts|gmail|accounts)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/gmail-accounts.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/gmail-accounts.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    wizard|w)
        if [ "$DEV_MODE" = "true" ]; then
            cd "$SCRIPT_DIR" && npx ts-node src/tools/wizard.ts "${COMMAND_ARGS[@]}"
        else
            cd "$SCRIPT_DIR" && node dist/tools/wizard.js "${COMMAND_ARGS[@]}"
        fi
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo ""
        usage
        exit 1
        ;;
esac